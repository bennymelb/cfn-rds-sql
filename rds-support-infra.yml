AWSTemplateFormatVersion: '2010-09-09'
Description: 'This is all the supporting infrastructure for standing up a RDS instance'
Parameters:
  Environment:
    Description: The environment of this stack
    Type: String
    AllowedValues: [dev,test,prod]
  AppName:
    Description: The name of the application this stack belongs to
    Type: String
  VpcId:
    Description: The Id of the VPC we are going to deploy to
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: The Id of the subnet we are going to deploy to
    Type: List<AWS::EC2::Subnet::Id>
  SqlServerEdition:
    Description: The sql server edition that we are going to use. Express, Web, Standard and Enterprise
    Type: String
    AllowedValues: [express,web,standard,enterprise]
    Default: express
  SqlServerMajorVersion:
    Description: The major version of sql server that we are going to use. 
    Type: String
    AllowedValues: [SQLServer2012, SQLServer2014 , SQLServer2016, SQLServer2017, SQLServer2019]
    Default: SQLServer2017
  AlertRecipient:
    Description: The email to receive RDS alert
    Type: String
Mappings:
  RdsEngineEditionMap:
    express:
      EngineName: sqlserver-ex
    web:
      EngineName: sqlserver-web
    standard:
      EngineName: sqlserver-se
    enterprise:
      EngineName: sqlserver-ee
  RdsEngineMajorVersionMap:
    SQLServer2012:
      ParameterGroupVersion: '11.0'
      OptionGroupVersion: '11.00'
    SQLServer2014:
      ParameterGroupVersion: '12.0'
      OptionGroupVersion: '12.00'
    SQLServer2016:
      ParameterGroupVersion: '13.0'
      OptionGroupVersion: '13.00'
    SQLServer2017:
      ParameterGroupVersion: '14.0'
      OptionGroupVersion: '14.00'
    SQLServer2019:
      ParameterGroupVersion: '15.0'
      OptionGroupVersion: '15.00'
Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  IsNonprod: !Not [ !Equals [ !Ref Environment, prod ] ]
Resources:
  RdsNonprodSg:
    Type: AWS::EC2::SecurityGroup
    Condition: IsNonprod
    Properties:
      GroupDescription: !Sub '${Environment}-${AppName}-RDS-SecurityGroup'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp: 0.0.0.0/0
        Description: Allow SQL connection from anywhere
  RdsProdSg:
    Type: AWS::EC2::SecurityGroup
    Condition: IsProd
    Properties:
      GroupDescription: !Sub '${Environment}-${AppName}-RDS-SecurityGroup'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp: 60.241.14.94/32
        Description: Allow SQL connection from Rowville Shop
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp: 121.223.198.148/32
        Description: Allow SQL connection from Warehouse (Home)
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp: 60.241.14.115/32
        Description: Allow SQL connection from Heidelberg Shop
  RdsSgParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-SecurityGroup
      Name: !Sub /${Environment}/${AppName}/rdssg
      Type: String
      Value: !If [ IsProd, !Ref RdsProdSg, !Ref RdsNonprodSg ]
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${Environment}-${AppName}-RDS-SubnetGroup
      DBSubnetGroupName: !Sub ${Environment}-${AppName}-RDS-SubnetGroup
      SubnetIds: !Ref SubnetIds
  RdSubnetGroupParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-SubnetGroup
      Name: !Sub /${Environment}/${AppName}/rdssubnetgroup
      Type: String
      Value: !Ref RdsSubnetGroup
  RdsOptionGroup: 
    Type: AWS::RDS::OptionGroup
    Properties: 
      EngineName: !FindInMap [ RdsEngineEditionMap, !Ref SqlServerEdition, EngineName ]
      MajorEngineVersion: !FindInMap [ RdsEngineMajorVersionMap, !Ref SqlServerMajorVersion, OptionGroupVersion ]
      OptionGroupDescription: !Sub ${Environment}-${AppName}-RDS-OptionGroup
      OptionConfigurations:
        - 
          OptionName: SQLSERVER_BACKUP_RESTORE
          OptionSettings:
            -
              Name:  IAM_ROLE_ARN
              Value: !GetAtt RdsSqlBackupRole.Arn
  RdsOptionGroupParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-OptionGroup
      Name: !Sub /${Environment}/${AppName}/rdsoptiongroup
      Type: String
      Value: !Ref RdsOptionGroup
  RdsParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: !Sub ${Environment}-${AppName}-RDS-ParameterGroup
      Family: !Join [ "-", [!FindInMap [ RdsEngineEditionMap, !Ref SqlServerEdition, EngineName ], !FindInMap [ RdsEngineMajorVersionMap, !Ref SqlServerMajorVersion, ParameterGroupVersion ] ] ]
      Parameters:
        rds.force_ssl: 1
  RdsParameterGroupParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-ParameterGroup
      Name: !Sub /${Environment}/${AppName}/rdsparametergroup
      Type: String
      Value: !Ref RdsParameterGroup
  RdsSqlBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub '${Environment}-${AppName}-IAM-Policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:putObject"
                Resource: "*"
  RdsMasterCred:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: !Sub ${Environment}-${AppName}-Rds-Master-Credential
      Name: !Sub /${Environment}/${AppName}/rdsmastercred
      GenerateSecretString: 
        SecretStringTemplate: '{"username": "rdsmaster"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      KmsKeyId: !Ref RdsCmk
  RdsCmk:
    Type: AWS::KMS::Key
    Properties: 
      Description: !Sub ${Environment}-${AppName}-Rds-Cmk
      Enabled: True
      EnableKeyRotation: True
      PendingWindowInDays: 30
      KeyPolicy:
        Version: '2012-10-17'  
        Statement:
          - Sid: Allow admin using key for RDS
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 
              - kms:*
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalTag/group: admin
  RdsAlertSnsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: 'RDS Monitoring'
      Subscription: 
      - Endpoint: !Ref AlertRecipient
        Protocol: email
  RdsAlertSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref RdsAlertSnsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - "SNS:Publish"
            Resource: '*'
  RdsCmkParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-Cmk-Arn
      Name: !Sub /${Environment}/${AppName}/rdscmk
      Type: String
      Value: !GetAtt RdsCmk.Arn
  SqlServerEditionParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-SqlServerEdition
      Name: !Sub /${Environment}/${AppName}/rdssqlserveredition
      Type: String
      Value: !Ref SqlServerEdition
  SqlServerMajorVersionParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-SqlServerMajorVersion
      Name: !Sub /${Environment}/${AppName}/rdssqlservermajorversion
      Type: String
      Value: !Ref SqlServerMajorVersion
  RdsAlertSnsTopicParam:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub ${Environment}-${AppName}-RDS-AlertSnsTopic
      Name: !Sub /${Environment}/${AppName}/rdsalertsnstopic
      Type: String
      Value: !Ref RdsAlertSnsTopic
Outputs:
  RdsNonprodSg:
    Description: The security group resource id for RDS
    Value: !GetAtt RdsNonprodSg.GroupId
    Condition: IsNonprod
  RdsProdSg:
    Description: The security group resource id for RDS
    Value: !GetAtt RdsProdSg.GroupId
    Condition: IsProd
  OptionGroup:
    Description: The RDS option group Name
    Value: !Ref RdsOptionGroup
  ParameterGroup:
    Description: The RDS parameter group name
    Value: !Ref RdsParameterGroup
  SubnetGroup:
    Description: The Rds Subnet Group name
    Value: !Ref RdsSubnetGroup
  RdsSqlBackupRole:
    Description: The IAM role for the RDS SQL native backup 
    Value: !Ref RdsSqlBackupRole
  RdsMasterCred:
    Description: The master credential for RDS
    Value: !Ref RdsMasterCred
  RdsCmk:
    Description: The kms cmk for RDS
    Value: !Ref RdsCmk
  RdsAlertSnsTopic:
    Description: The SNS Topic for the alert to sent to
    Value: !Ref RdsAlertSnsTopic